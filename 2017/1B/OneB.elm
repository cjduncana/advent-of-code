module OneB exposing (solution)

import Array.Hamt as Array exposing (Array)


rawInput : String
rawInput =
    "32941994713271959948248321975648598766826381888897682988942438326656546814"
        ++ "1288686223452599155327657864126558995917841421838932936149667399161"
        ++ "4673626344552179413995562266818138372393213966143124914469397692587"
        ++ "2511126632178628792332267635339111288933545363532138471222514638578"
        ++ "9415981982872482796957643219184778777273288126687546972118933188222"
        ++ "8146576832921314638221317393256471998598117289632684663355273845983"
        ++ "9338457217134978117669953677958579652221836687655174542633541111348"
        ++ "4133463134511159613168272619657476316518788933759958334563441343616"
        ++ "5539744188866156771585647718555182529936669683581662398618765391487"
        ++ "1647157248498945633144269593481192869551444394527317626665687416121"
        ++ "5325446913172413769983298472893786595671192559262845661713369525955"
        ++ "4548719328229938621332325125972547181236812263887375866231118312954"
        ++ "3694329373593572664673833183262395728773147651218448311261781739887"
        ++ "9976521891317882596626881647655979294735995685998922891713626717857"
        ++ "1776316345292573489873792149646548747995389669692188457724414468727"
        ++ "1928199194482759221663211581413652375452226336883728914518424344585"
        ++ "2769877434211148249899938383149257761515459127871965679827737736328"
        ++ "4379468757998373193231795767644654155432692988651312845433511879457"
        ++ "9216389348775575752413943637216672377789624559614935598485225824137"
        ++ "4821897121248637323279587836296487385599469714969282491718337554519"
        ++ "2119453587398199912564474614219929345185468661129966379693813498542"
        ++ "4747321981764966947461115769257154939672964872582378541523823655798"
        ++ "7689439181575981537331915921347555525148875427988824549237359547118"
        ++ "9191353244684697662848376529881512529221627313527441221459672786923"
        ++ "1451659896112233722411499294362473748184674816419318729725822954259"
        ++ "3699853519442391654436779952227691444523158227236838883183443756275"
        ++ "2119325286474352863554693373718848649568451797751926315617575295381"
        ++ "9644268436252828195247471197268721935697856119598967761435399152999"
        ++ "6827637471299648536785349473437625751127344373643346449628721961569"
        ++ "7341973131715166768916149828396454638596713572963686159214116763"


input : Array Int
input =
    rawInput
        |> String.split ""
        |> List.map String.toInt
        |> List.foldr (Result.map2 (::)) (Ok [])
        |> Result.withDefault []
        |> Array.fromList


steps : Int
steps =
    Array.length input // 2


findNeighbors : Int -> Int -> ( Int, Int )
findNeighbors index current =
    let
        neighbor =
            case Array.get (index + steps) input of
                Just forwardNeighbor ->
                    forwardNeighbor

                Nothing ->
                    Array.get (index - steps) input
                        |> Maybe.withDefault 0
    in
        ( current, neighbor )


same : ( Int, Int ) -> Int
same ( current, neighbor ) =
    if current == neighbor then
        current
    else
        0


solution : Int
solution =
    Array.toList input
        |> List.indexedMap (\index -> findNeighbors index >> same)
        |> List.sum
